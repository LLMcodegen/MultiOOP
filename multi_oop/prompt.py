def select_lang(language):
    if language == "cpp":
        lang = "C++"
        begain_word = "```cpp"
    elif language == "cs":
        lang = "C#"
        begain_word = "```csharp"
    elif language == "java":
        lang = "Java"
        begain_word = "```java"
    elif language == "js":
        lang = "JavaScript"
        begain_word = "```javascript"
    elif language == "php":
        lang = "PHP"
        begain_word = "```php"
    elif language == "python":
        lang = "python"
        begain_word = "```python"
    return lang, begain_word

def normal_prompt(context, lang, begain_word):
    prompt = context
    # prompt = f"\nYou are a helpful programmer, and your task is to fulfill the user's requirements.\n\n# User requirements:\n{context}\n\n--------------------\nIt is important that you follow the instructions below.\n\n## Instruction\n{begain_word}\nFulfill the user's requirements and avoid generating any additional content.\n```\n"
    # prompt = f"\nYou are a helpful {lang} programmer, and your task is to write correct code based on the following requirements.\n# Requirement:\n{context}\n\n# Instruction\n## Complete code:\n{begain_word}\nWrite correct {lang} code based on the requirements.\n```\n"
    return prompt

def normal_res_prompt(context, lang, begain_word):
    # prompt = context
    prompt = f"\nYou are a helpful programmer, and your task is to fulfill the user's requirements.\n\n# User requirements:\n{context}\n\n--------------------\nIt is important that you follow the instructions below.\n\n## Instruction\n{begain_word}\nFulfill the user's requirements and avoid generating any additional content.\n```\n"
    # prompt = f"\nYou are a helpful {lang} programmer, and your task is to write correct code based on the following requirements.\n# Requirement:\n{context}\n\n# Instruction\n## Complete code:\n{begain_word}\nWrite correct {lang} code based on the requirements.\n```\n"
    return prompt

def cot_prompt(context, lang, begain_word):
    # prompt = context + f"\nLet's generate the code step by step and place the final code into {begain_word}."
    prompt = context + f"\nLet's generate the code step by step."
    # prompt = f"\nYou are a helpful {lang} programmer, and your task is to write correct code based on the following requirements.\n\n# Instruction\n## Requirement:\n{context}\nLet's generate the code step by step.\n\n ## Generate code steps:\nWrite down the step-by-step process for generating the code.\n## Complete entire code:\n{begain_word}\nWrite correct {lang} code based on the requirements.\n```\n"
    return prompt

def few_shot_prompt(context, lang, begain_word):
    # prompt = context + f"\nLet's generate the code step by step and place the final code into {begain_word}."
    if lang == "python":
        prompt = "Example 1:\nQuestion:\nFirst, write a XPT class using the Python language. Then, within the XPT class, create a public function called max_palindrome to implement finding the length of the longest palindromic substring in a given string s.\n\nGenerated code:\n```python\nclass XPT:\n    def max_palindrome(self, s: str) -> int:\n        if not s:\n            return 0\n        n = len(s)\n        if n == 1:\n            return 1\n        dp = [[False] * n for _ in range(n)]\n        max_length = 1\n        for i in range(n):\n            dp[i][i] = True\n        for i in range(n-1):\n            if s[i] == s[i+1]:\n                dp[i][i+1] = True\n                max_length = 2\n        for length in range(3, n+1):\n            for start in range(n-length+1):\n                end = start + length - 1\n                if s[start] == s[end] and dp[start+1][end-1]:\n                    dp[start][end] = True\n                    max_length = length\n        return max_length\n```\n\nExample 2:\nQuestion:\nFirstly, design a PrimeFinder class using Python language, which has instance attributes n and k, a private function private_Prime_numbers, and a public function public_Prime_numbers. Then, return the k-th prime number less than or equal to n in the private function private_Prime_numbers. Finally, call the private function private_Prime_numbers in the public function public_Prime_numbers to return the result.\n\nGenerated code:\n```python\nclass PrimeFinder:\n    def __init__(self, n, k):\n        self.n = n\n        self.k = k\n    def __private_Prime_numbers(self):\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num ** 0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n        primes = []\n        for i in range(2, self.n + 1):\n            if is_prime(i):\n                primes.append(i)\n        if 1 <= self.k <= len(primes):\n            return primes[self.k - 1]\n        return None\n    def public_Prime_numbers(self):\n        return self.__private_Prime_numbers()\n```\nQuestion:\n"
    elif lang == "Java":
        prompt = "Example 1:\nQuestion:\nFirst, write a XPT class using the Java language. Then, within the XPT class, create a public function called max_palindrome to implement finding the length of the longest palindromic substring in a given string s.\n\nGenerated code:\n```java\nclass XPT {\n    public int max_palindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return 0;\n        }\n        \n        int n = s.length();\n        boolean[][] dp = new boolean[n][n];\n        int maxLength = 1;  // Minimum palindrome length is 1 (single character)\n        \n        // Every single character is a palindrome\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = true;\n        }\n        \n        // Check for palindromes of length 2\n        for (int i = 0; i < n - 1; i++) {\n            if (s.charAt(i) == s.charAt(i + 1)) {\n                dp[i][i + 1] = true;\n                maxLength = 2;\n            }\n        }\n        \n        // Check for palindromes of length 3 and more\n        for (int len = 3; len <= n; len++) {\n            for (int start = 0; start <= n - len; start++) {\n                int end = start + len - 1;\n                \n                if (s.charAt(start) == s.charAt(end) && dp[start + 1][end - 1]) {\n                    dp[start][end] = true;\n                    maxLength = len;\n                }\n            }\n        }\n        \n        return maxLength;\n    }\n```\n\nExample 2:\nQuestion:\nFirstly, design a PrimeFinder class using Java language, which has instance attributes n and k, a private function private_Prime_numbers, and a public function public_Prime_numbers. Then, return the k-th prime number less than or equal to n in the private function private_Prime_numbers. Finally, call the private function private_Prime_numbers in the public function public_Prime_numbers to return the result.\n\nGenerated code:\n```java\nclass PrimeFinder {\n    private int n;  // Upper limit\n    private int k;  // k-th prime number to find\n    \n    public PrimeFinder(int n, int k) {\n        this.n = n;\n        this.k = k;\n    }\n    \n    // Private function to find k-th prime number\n    private int private_Prime_numbers() {\n        if (n < 2 || k <= 0) {\n            return -1;  // Invalid input handling\n        }\n        \n        int count = 0;  // Count of prime numbers found\n        for (int num = 2; num <= n; num++) {\n            if (isPrime(num)) {\n                count++;\n                if (count == k) {\n                    return num;  // Return when k-th prime is found\n                }\n            }\n        }\n        return -1;  // Return -1 if k-th prime not found within n\n    }\n    // Helper function to check if a number is prime\n    private boolean isPrime(int num) {\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        \n        for (int i = 3; i <= Math.sqrt(num); i += 2) {\n            if (num % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Public function that calls private function\n    public int public_Prime_numbers() {\n        return private_Prime_numbers();\n    }\n}\n```\nQuestion:\n"
    elif lang == "C++":
        prompt = "Example 1:\nQuestion:\nFirst, write a XPT class using the C++ language. Then, within the XPT class, create a public function called max_palindrome to implement finding the length of the longest palindromic substring in a given string s.\n\nGenerated code:\n```cpp\nclass XPT {\nprivate:\n    int expandAroundCenter(const std::string& s, int left, int right) {\n        while (left >= 0 && right < s.length() && s[left] == s[right]) {\n            left--;\n            right++;\n        }\n        return right - left - 1;\n    }\npublic:\n    int max_palindrome(std::string s) {\n        if (s.empty()) return 0;\n        if (s.length() == 1) return 1;\n        int maxLength = 1;\n        for (int i = 0; i < s.length(); i++) {\n            int len1 = expandAroundCenter(s, i, i);\n            int len2 = expandAroundCenter(s, i, i + 1);\n            maxLength = std::max(maxLength, std::max(len1, len2));\n        }\n        return maxLength;\n    }\n};\n```\n\nExample 2:\nQuestion:\nFirstly, design a PrimeFinder class using C++ language, which has instance attributes n and k, a private function private_Prime_numbers, and a public function public_Prime_numbers. Then, return the k-th prime number less than or equal to n in the private function private_Prime_numbers. Finally, call the private function private_Prime_numbers in the public function public_Prime_numbers to return the result.\n\nGenerated code:\n```cpp\nclass PrimeFinder {\nprivate:\n    int n;\n    int k;\n    int private_Prime_numbers() {\n        if (k <= 0 || n < 2) return -1;\n        std::vector<bool> isPrime(n + 1, true);\n        std::vector<int> primes;\n        isPrime[0] = isPrime[1] = false;\n        for (int i = 2; i <= n; i++) {\n            if (isPrime[i]) {\n                primes.push_back(i);\n                for (int j = i * 2; j <= n; j += i) {\n                    isPrime[j] = false;\n                }\n            }\n        }\n        if (k <= primes.size()) {\n            return primes[k - 1];\n        }\n        return -1;\n    }\npublic:\n    PrimeFinder(int upperLimit, int position) : n(upperLimit), k(position) {}\n    int public_Prime_numbers() {\n        return private_Prime_numbers();\n    }\n};\n```\nQuestion:\n"
    elif lang == "C#":
        prompt = "Example 1:\nQuestion:\nFirst, write a XPT class using the C# language. Then, within the XPT class, create a public function called max_palindrome to implement finding the length of the longest palindromic substring in a given string s.\n\nGenerated code:\n```csharp\nusing System;\n\nclass XPT\n{\n    public int max_palindrome(string s)\n    {\n        if (string.IsNullOrEmpty(s))\n            return 0;\n\n        int maxLength = 1; // Single character is at least a palindrome\n        int n = s.Length;\n\n        for (int i = 0; i < n; i++)\n        {\n            int len1 = ExpandAroundCenter(s, i, i);     // Odd length palindromes\n            int len2 = ExpandAroundCenter(s, i, i + 1); // Even length palindromes\n\n            int currentMax = Math.Max(len1, len2);\n            if (currentMax > maxLength)\n                maxLength = currentMax;\n        }\n\n        return maxLength;\n    }\n\n    private int ExpandAroundCenter(string s, int left, int right)\n    {\n        while (left >= 0 && right < s.Length && s[left] == s[right])\n        {\n            left--;\n            right++;\n        }\n        return right - left - 1; // Length of palindrome\n    }\n}\n```\n\nExample 2:\nQuestion:\nFirstly, design a PrimeFinder class using C# language, which has instance attributes n and k, a private function private_Prime_numbers, and a public function public_Prime_numbers. Then, return the k-th prime number less than or equal to n in the private function private_Prime_numbers. Finally, call the private function private_Prime_numbers in the public function public_Prime_numbers to return the result.\n\nGenerated code:\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass PrimeFinder\n{\n    // Instance attributes\n    public int n { get; set; }\n    public int k { get; set; }\n\n    // Constructor\n    public PrimeFinder(int n, int k)\n    {\n        this.n = n;\n        this.k = k;\n    }\n\n    // Private function to get the k-th prime number less than or equal to n\n    private int private_Prime_numbers()\n    {\n        List<int> primes = new List<int>();\n\n        for (int i = 2; i <= n; i++)\n        {\n            if (IsPrime(i))\n            {\n                primes.Add(i);\n            }\n        }\n\n        if (k <= 0 || k > primes.Count)\n        {\n            throw new ArgumentException($\"There are only {primes.Count} primes less than or equal to {n}.\");\n        }\n\n        return primes[k - 1]; // k-th prime (1-based index)\n    }\n\n    // Helper function to check if a number is prime\n    private bool IsPrime(int number)\n    {\n        if (number < 2) return false;\n        for (int i = 2; i * i <= number; i++)\n        {\n            if (number % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    // Public function that calls the private function and returns the result\n    public int public_Prime_numbers()\n    {\n        return private_Prime_numbers();\n    }\n}\n```\nQuestion:\n"
    elif lang == "JavaScript":
        prompt = "Example 1:\nQuestion:\nFirst, write a XPT class using the JavaScript language. Then, within the XPT class, create a public function called max_palindrome to implement finding the length of the longest palindromic substring in a given string s.\n\nGenerated code:\n```javascript\nclass XPT {\n  max_palindrome(s) {\n    if (!s || s.length === 0) return 0;\n    let maxLength = 1;\n    for (let i = 0; i < s.length; i++) {\n      let length1 = this.expandAroundCenter(s, i, i);\n      let length2 = this.expandAroundCenter(s, i, i + 1);\n      maxLength = Math.max(maxLength, length1, length2);\n    }\n\n    return maxLength;\n  }\n  expandAroundCenter(s, left, right) {\n    while (left >= 0 && right < s.length && s[left] === s[right]) {\n      left--;\n      right++;\n    }\n    return right - left - 1;\n  }\n}\n```\n\nExample 2:\nQuestion:\nFirstly, design a PrimeFinder class using JavaScript language, which has instance attributes n and k, a private function private_Prime_numbers, and a public function public_Prime_numbers. Then, return the k-th prime number less than or equal to n in the private function private_Prime_numbers. Finally, call the private function private_Prime_numbers in the public function public_Prime_numbers to return the result.\n\nGenerated code:\n```javascript\nclass PrimeFinder {\n  constructor(n, k) {\n    this.n = n;\n    this.k = k;\n  }\n  _private_Prime_numbers() {\n    const primes = [];\n\n    for (let num = 2; num <= this.n; num++) {\n      if (this._isPrime(num)) {\n        primes.push(num);\n      }\n    }\n\n    if (this.k > primes.length) {\n      return -1;\n    }\n    return primes[primes.length - this.k];\n  }\n  _isPrime(num) {\n    if (num < 2) return false;\n    for (let i = 2; i * i <= num; i++) {\n      if (num % i === 0) return false;\n    }\n    return true;\n  }\n  public_Prime_numbers() {\n    return this._private_Prime_numbers();\n  }\n}\n```\nQuestion:\n"
    elif lang == "PHP":
        prompt = "Example 1:\nQuestion:\nFirst, write a XPT class using the PHP language. Then, within the XPT class, create a public function called max_palindrome to implement finding the length of the longest palindromic substring in a given string s.\n\nGenerated code:\n```php\n<?php\n\nclass XPT\n{\n    public function max_palindrome(string $s): int\n    {\n        $n = strlen($s);\n        if ($n == 0) {\n            return 0;\n        }\n        $maxLength = 1;\n        for ($i = 0; $i < $n; $i++) {\n            $left = $i;\n            $right = $i;\n            while ($left >= 0 && $right < $n && $s[$left] == $s[$right]) {\n                $currentLength = $right - $left + 1;\n                if ($currentLength > $maxLength) {\n                    $maxLength = $currentLength;\n                }\n                $left--;\n                $right++;\n            }\n            $left = $i;\n            $right = $i + 1;\n            while ($left >= 0 && $right < $n && $s[$left] == $s[$right]) {\n                $currentLength = $right - $left + 1;\n                if ($currentLength > $maxLength) {\n                    $maxLength = $currentLength;\n                }\n                $left--;\n                $right++;\n            }\n        }\n        return $maxLength;\n    }\n}\n\n?>\n```\n\nExample 2:\nQuestion:\nFirstly, design a PrimeFinder class using PHP language, which has instance attributes n and k, a private function private_Prime_numbers, and a public function public_Prime_numbers. Then, return the k-th prime number less than or equal to n in the private function private_Prime_numbers. Finally, call the private function private_Prime_numbers in the public function public_Prime_numbers to return the result.\n\nGenerated code:\n```php\n<?php\nclass PrimeFinder\n{\n    private int $n;\n    private int $k;\n    public function __construct(int $n, int $k)\n    {\n        $this->n = $n;\n        $this->k = $k;\n    }\n    private function private_Prime_numbers(): ?int\n    {\n        $primes = [];\n        for ($num = 2; $num <= $this->n; $num++) {\n            $isPrime = true;\n            for ($i = 2; $i * $i <= $num; $i++) {\n                if ($num % $i === 0) {\n                    $isPrime = false;\n                    break;\n                }\n            }\n            if ($isPrime) {\n                $primes[] = $num;\n            }\n        }\n        $totalPrimes = count($primes);\n        if ($this->k > $totalPrimes || $this->k <= 0) {\n            return null;\n        }\n        return $primes[$this->k - 1];\n    }\n    public function public_Prime_numbers(): ?int\n    {\n        return $this->private_Prime_numbers();\n    }\n}\n?>\n```\nQuestion:\n"
    prompt = prompt + context + "\n\nGenerated code:\n"
    # prompt = f"\nYou are a helpful {lang} programmer, and your task is to write correct code based on the following requirements.\n\n# Instruction\n## Requirement:\n{context}\nLet's generate the code step by step.\n\n ## Generate code steps:\nWrite down the step-by-step process for generating the code.\n## Complete entire code:\n{begain_word}\nWrite correct {lang} code based on the requirements.\n```\n"
    return prompt

def select_prompt(context, language, pro):
    lang, begain_word = select_lang(language)
    if pro == "normal":
        prompt = normal_prompt(context, lang, begain_word)
    elif pro == "normal_res":
        prompt = normal_res_prompt(context, lang, begain_word)
    elif pro == "cot":
        prompt = cot_prompt(context, lang, begain_word)
    elif pro == "few_shot":
        prompt = few_shot_prompt(context, lang, begain_word)
    return prompt